import fs from 'fs'
import path from 'path'
import { PNG } from 'pngjs'

const noiseTheme = {
  light: '#191724',
  dark: '#faf4ed',
} as const

interface RgbColor {
  r: number
  g: number
  b: number
}

const hexToRgb = (hex: string): RgbColor => {
  const r = parseInt(hex.slice(1, 3), 16)
  const g = parseInt(hex.slice(3, 5), 16)
  const b = parseInt(hex.slice(5, 7), 16)
  return { r, g, b }
}

const createPngNoiseDataURL = (hexColor: string): Promise<string> => {
  return new Promise((resolve) => {
    const { r, g, b } = hexToRgb(hexColor)
    const width = 128
    const height = 128
    const maxOpacity = 10 // 0-255
    const png = new PNG({ width, height, filterType: -1 })

    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        const idx = (width * y + x) << 2
        const alpha = Math.floor(Math.random() * maxOpacity)

        png.data[idx] = r
        png.data[idx + 1] = g
        png.data[idx + 2] = b
        png.data[idx + 3] = alpha
      }
    }

    const chunks: Buffer[] = []
    png
      .pack()
      .on('data', (chunk: Buffer) => chunks.push(chunk))
      .on('end', () => {
        const buffer = Buffer.concat(chunks)
        resolve(`url('data:image/png;base64,${buffer.toString('base64')}')`)
      })
  })
}

async function generateNoiseStyles() {
  console.log('ðŸš€ Generating noise background styles...')
  const noiseUrlLight = await createPngNoiseDataURL(noiseTheme.light)
  const noiseUrlDark = await createPngNoiseDataURL(noiseTheme.dark)

  const cssContent = `/*
 * -----------------------------------------------------------------------------
 * THIS FILE IS AUTO-GENERATED BY scripts/generate-noise.ts
 * DO NOT EDIT DIRECTLY.
 * -----------------------------------------------------------------------------
 */
:root {
  --noise-texture-light: ${noiseUrlLight};
  --noise-texture-dark: ${noiseUrlDark};
}
`

  const outputDir = path.resolve(process.cwd(), 'styles')
  const outputPath = path.join(outputDir, 'noise.css')

  fs.mkdirSync(outputDir, { recursive: true })
  fs.writeFileSync(outputPath, cssContent, 'utf8')

  console.log(
    `âœ… Noise styles generated successfully at: ${outputPath.replace(process.cwd(), '')}`,
  )
}

generateNoiseStyles()
